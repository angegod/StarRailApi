{"version":3,"file":"static/js/92.bfc4f536.chunk.js","mappings":"mBAoIA,QApIa,CAAC,CACVA,KAAK,OACLC,KAAK,CAAC,CACFC,KAAK,UACLD,KAAK,IACLE,SAAQ,GACV,CACED,KAAK,eACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,cACLD,KAAK,MACLE,SAAQ,GACV,CACED,KAAK,mBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,oBACLD,KAAK,GACLE,SAAQ,GACV,CACED,KAAK,qBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,qBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,4BACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,aACLD,KAAK,GACLE,SAAQ,GACV,CACED,KAAK,wBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,gBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,sBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,qBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,iBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,iBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,oBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,oBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,cACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,gBACLD,KAAK,KACLE,SAAQ,KAEd,CACEH,KAAK,MACLC,KAAK,CAAC,CACFC,KAAK,UACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,eACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,cACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,mBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,eACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,oBACLD,KAAK,IACLE,SAAQ,GACV,CACED,KAAK,qBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,qBACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,4BACLD,KAAK,KACLE,SAAQ,GACV,CACED,KAAK,aACLD,KAAK,IACLE,SAAQ,GACV,CACED,K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","sources":["data/standard.js","data/weight.js","data/AffixName.js","worker/worker.js","data/combination.js"],"sourcesContent":["let standard=[{\r\n    type:'main',\r\n    data:[{\r\n        name:'HPDelta',\r\n        data:705,\r\n        percent:false\r\n    },{\r\n        name:'HPAddedRatio',\r\n        data:43.2,\r\n        percent:true\r\n    },{\r\n        name:'AttackDelta',\r\n        data:352.8,\r\n        percent:false\r\n    },{\r\n        name:'AttackAddedRatio',\r\n        data:43.2,\r\n        percent:true\r\n    },{\r\n        name:'DefenceAddedRatio',\r\n        data:54,\r\n        percent:true\r\n    },{\r\n        name:'CriticalChanceBase',\r\n        data:32.4,\r\n        percent:true\r\n    },{\r\n        name:'CriticalDamageBase',\r\n        data:64.8,\r\n        percent:true\r\n    },{\r\n        name:'BreakDamageAddedRatioBase',\r\n        data:64.8,\r\n        percent:true\r\n    },{\r\n        name:'SpeedDelta',\r\n        data:25,\r\n        percent:false\r\n    },{\r\n        name:'StatusProbabilityBase',\r\n        data:43.2,\r\n        percent:true\r\n    },{\r\n        name:'IceAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'ImaginaryAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'PhysicalAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'FireAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'WindAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'ThunderAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'QuantumAddedRatio',\r\n        data:38.8,\r\n        percent:true\r\n    },{\r\n        name:'SPRatioBase',\r\n        data:19.4,\r\n        percent:true\r\n    },{\r\n        name:'HealRatioBase',\r\n        data:34.5,\r\n        percent:true\r\n    }]\r\n},{\r\n    type:'sub',\r\n    data:[{\r\n        name:'HPDelta',\r\n        data:42.4,\r\n        percent:false  \r\n    },{\r\n        name:'HPAddedRatio',\r\n        data:4.32,\r\n        percent:true\r\n    },{\r\n        name:'AttackDelta',\r\n        data:21.2,\r\n        percent:false,\r\n    },{\r\n        name:'AttackAddedRatio',\r\n        data:4.32,\r\n        percent:true\r\n    },{\r\n        name:'DefenceDelta',\r\n        data:21.2,\r\n        percent:false\r\n    },{\r\n        name:'DefenceAddedRatio',\r\n        data:5.4,\r\n        percent:true\r\n    },{\r\n        name:'CriticalChanceBase',\r\n        data:3.24,\r\n        percent:true\r\n    },{\r\n        name:'CriticalDamageBase',\r\n        data:6.48,\r\n        percent:true\r\n    },{\r\n        name:'BreakDamageAddedRatioBase',\r\n        data:6.48,\r\n        percent:true\r\n    },{\r\n        name:'SpeedDelta',\r\n        data:2.6,\r\n        percent:false\r\n    },{\r\n        name:'StatusProbabilityBase',\r\n        data:4.32,\r\n        percent:true\r\n    },{\r\n        name:'StatusResistanceBase',\r\n        data:4.32,\r\n        percent:true\r\n    }]\r\n}]\r\n\r\nexport default standard;","let weight={\r\n1: {\r\n    main: [\"hp\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n},\r\n2: {\r\n    main: [\"atk\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n},\r\n3: {\r\n    main: [\"atk\", \"hp\", \"def\", \"crit_rate\", \"crit_dmg\", \"heal_rate\", \"effect_hit\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n},\r\n4: {\r\n    main: [\"atk\", \"hp\", \"def\", \"spd\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n},\r\n5: {\r\n    main: [\"atk\", \"hp\", \"def\", \"break_dmg\", \"sp_rate\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n},\r\n6: {\r\n    main: [\"atk\", \"hp\", \"def\", \"physical_dmg\", \"fire_dmg\", \"ice_dmg\", \"lightning_dmg\", \"wind_dmg\", \"quantum_dmg\", \"imaginary_dmg\"],\r\n    sub: [\"hp\", \"atk\", \"def\", \"spd\", \"crit_rate\", \"crit_dmg\", \"effect_res\", \"effect_hit\", \"break_dmg\"]\r\n}};\r\n\r\nexport default weight;","let AffixName=[{\r\n    fieldName:'HPDelta',\r\n    type:'hp',\r\n    name:'生命力',\r\n    percent:false,\r\n    range:[34,38,42]\r\n},{\r\n    fieldName:'HPAddedRatio',\r\n    type:'hp',\r\n    name:'生命力%數',\r\n    percent:true,\r\n    range:[3.45,3.89,4.32]\r\n},{\r\n    fieldName:'AttackDelta',\r\n    type:'atk',\r\n    name:'攻擊力',\r\n    percent:false,\r\n    range:[17,19,21]\r\n},{\r\n    fieldName:'AttackAddedRatio',\r\n    type:'atk',\r\n    name:'攻擊力%數',\r\n    percent:true,\r\n    range:[3.45,3.89,4.32]\r\n},{\r\n    fieldName:'DefenceDelta',\r\n    type:'def',\r\n    name:'防禦力',\r\n    percent:false,\r\n    range:[17,19,21]\r\n},{\r\n    fieldName:'DefenceAddedRatio',\r\n    type:'def',\r\n    name:'防禦力%數',\r\n    percent:true,\r\n    range:[4.32,4.86,5.4]\r\n},{\r\n    fieldName:'CriticalChanceBase',\r\n    type:'crit_rate',\r\n    name:'暴擊率',\r\n    percent:true,\r\n    range:[2.6,2.9,3.2]\r\n\r\n},{\r\n    fieldName:'CriticalDamageBase',\r\n    type:'crit_dmg',\r\n    name:'暴擊傷害',\r\n    percent:true,\r\n    range:[5.2,5.8,6.48]\r\n},{\r\n    fieldName:'SpeedDelta',\r\n    type:'spd',\r\n    name:'速度',\r\n    percent:false,\r\n    range:[2.0,2.3,2.6]\r\n},{\r\n    fieldName:'BreakDamageAddedRatioBase',\r\n    type:'break_dmg',\r\n    name:'擊破特攻',\r\n    percent:true,\r\n    range:[5.2,5.8,6.5]\r\n},{\r\n    fieldName:'SPRatioBase',\r\n    type:'sp_rate',\r\n    name:'能量充能效率',\r\n    percent:true\r\n},{\r\n    fieldName:'HealRatioBase',\r\n    type:'heal_rate',\r\n    name:'治療加成',\r\n    percent:true\r\n},{\r\n    fieldName:'StatusProbabilityBase',\r\n    type:'effect_hit',\r\n    name:'效果命中',\r\n    percent:true,\r\n    range:[3.45,3.89,4.32]\r\n},{\r\n    fieldName:'StatusResistanceBase',\r\n    type:'effect_res',\r\n    name:'效果抗性',\r\n    percent:true,\r\n    range:[3.45,3.89,4.32]\r\n},{\r\n    fieldName:'PhysicalAddedRatio',\r\n    type:'physical_dmg',\r\n    name:'物理屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'FireAddedRatio',\r\n    type:'fire_dmg',\r\n    name:'火屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'IceAddedRatio',\r\n    type:'ice_dmg',\r\n    name:'冰屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'ThunderAddedRatio',\r\n    type:'lightning_dmg',\r\n    name:'雷屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'WindAddedRatio',\r\n    type:'wind_dmg',\r\n    name:'風屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'QuantumAddedRatio',\r\n    type:'quantum_dmg',\r\n    name:'量子屬性傷害提高',\r\n    percent:true\r\n},{\r\n    fieldName:'ImaginaryAddedRatio',\r\n    type:'imaginary_dmg',\r\n    name:'虛數屬性傷害提高',\r\n    percent:true\r\n}];\r\n\r\nexport default AffixName;","import standard from '../data/standard';\r\nimport weight from '../data/weight';\r\nimport AffixName from '../data/AffixName';\r\nimport {findCombinations,EnchanceAllCombinations} from '../data/combination';\r\n\r\n\r\nonmessage = function (event) {\r\n    //宣告變數\r\n    let SubData=event.data.SubData;\r\n    let partsIndex=parseInt(event.data.partsIndex);\r\n    //let charID=event.data.charID;\r\n    let MainAffix=AffixName.find((a)=>a.name===event.data.MainData);\r\n\r\n    //計算可用強化次數\r\n    var enchanceCount=0;\r\n    SubData.forEach(sb=>{    \r\n        enchanceCount=enchanceCount+Number(sb.count);\r\n    });\r\n\r\n    //計算可能的強化組合\r\n    let combination=findCombinations(enchanceCount+4,4);\r\n    \r\n    //var charStandard=score.find((item)=>parseInt(Object.keys(item)[0])===parseInt(charID))[charID];\r\n    let charStandard=calStand(event.data.standard);\r\n    \r\n    let coeEfficent=[];//當前遺器係數arr\r\n    SubData.forEach((sub)=>{\r\n        let SubAffixType=AffixName.find((s)=>s.name===sub.subaffix);\r\n        coeEfficent.push({\r\n            type:SubAffixType.type,\r\n            fieldName:SubAffixType.fieldName,\r\n            num:Number(charStandard[SubAffixType.type])\r\n        });\r\n    });\r\n    let MainData=charStandard[MainAffix.type];\r\n    let result =[];\r\n    //let origin = relicScore(partsIndex,charID,SubData,MainData);\r\n    let origin=relicScore(partsIndex,charStandard,SubData,MainData);\r\n    //先算原本的遺器的分數\r\n\r\n    let p1=new Promise(async (resolve,reject)=>{\r\n        combination.forEach((c,i)=>{\r\n            //計算各種強化程度的組合\r\n            let subcombination=EnchanceAllCombinations(c);\r\n\r\n            subcombination.forEach((s)=>{\r\n                let res=0;\r\n                if(partsIndex!==1&&partsIndex!==2)\r\n                    res=3*MainData;\r\n                \r\n                let total=0;\r\n                let caltype=[];//已經計算過的詞條種類\r\n\r\n                s.forEach((el,i) => {//對每個屬性詞條開始進行模擬計算\r\n                    total=0;//詞條模擬出來的總和\r\n\r\n                    let sub=coeEfficent[i];\r\n                    let targetRange=AffixName.find((st)=>st.fieldName===sub.fieldName).range;\r\n                    el.forEach((num)=>total+=targetRange[num]);\r\n\r\n                    //計算有效詞條數\r\n                    let affixStandard=standard.find((t)=>t.type==='sub').data.find((d)=>d.name===sub.fieldName).data;\r\n                    let cal=parseFloat(total/affixStandard).toFixed(2);\r\n\r\n                    //獲得加權有效詞條數 並加上去\r\n                    let affixmutl=parseFloat(charStandard[sub.type]*cal);\r\n                    \r\n                    //碰到同一種類的詞條需要擇優處理\r\n                    //let smallAffix=caltype.find((ct)=>ct.type===sub.type);\r\n                    \r\n                    //如果沒有計算過此種類詞條\r\n                    caltype.push({\r\n                        type:sub.fieldName,\r\n                        affixmutl:affixmutl\r\n                    });    \r\n                    \r\n                });\r\n\r\n                caltype.forEach((ms)=>{\r\n                    if(ms.type!=='AttackDelta'&&ms.type!=='DefenceDelta'&&ms.type!=='HPDelta')\r\n                        res+=ms.affixmutl;\r\n                });\r\n                \r\n\r\n                //理想分數\r\n                let IdealyScore=Number((parseFloat(res/calPartWeights(charStandard,partsIndex))*100).toFixed(1));\r\n                result.push(IdealyScore);\r\n                \r\n            });\r\n        });\r\n\r\n        resolve(origin);\r\n    })\r\n\r\n    p1.then((score)=>{\r\n        //設立分數標準\r\n        let scoreStand=[\r\n            {rank:'S+',stand:85,color:'rgb(239, 68, 68)',tag:'S+'},\r\n            {rank:'S',stand:75,color:'rgb(239, 68, 68)',tag:'S'},\r\n            {rank:'A',stand:50,color:'rgb(234, 179, 8)',tag:'A'},\r\n            {rank:'B',stand:35,color:'rgb(234, 88 , 12)',tag:'B'},\r\n            {rank:'C',stand:15,color:'rgb(163, 230, 53)',tag:'C'},\r\n            {rank:'D',stand:0 ,color:'rgb(22,163,74)',tag:'D'}\r\n        ];\r\n        let overScoreList=JSON.parse(JSON.stringify(result)).filter((num)=>num>=Number(origin));\r\n        let expRate=parseFloat((overScoreList.length)/(result.length)).toFixed(2);\r\n        let copy=JSON.parse(JSON.stringify(result));\r\n        let relicrank=undefined;\r\n        let returnData=[]\r\n        \r\n        //根據標準去分類\r\n        scoreStand.forEach((stand,i)=>{\r\n            //區分符合區間跟不符合的 並一步步拿掉前面篩選過的區間\r\n            let match=copy.filter((num)=>num>=stand.stand);\r\n            copy=copy.filter((num)=>num<stand.stand);\r\n\r\n            returnData.push({\r\n                label:stand.tag,\r\n                value:Number((parseFloat(match.length/result.length)*100).toFixed(2)),\r\n                color:stand.color,\r\n                tag:stand.rank\r\n            });\r\n\r\n            //console.log(`${match.length}/${result.length}`);\r\n\r\n            //接著去找尋這個分數所屬的區間\r\n            if(stand.stand<=origin&&relicrank===undefined)\r\n                relicrank=stand;\r\n\r\n        });\r\n\r\n        /*\r\n        //如果區間數量為0 則不予顯示\r\n        returnData=returnData.filter((r)=>r.value>0);*/\r\n        this.postMessage({\r\n            expRate:expRate,//期望值\r\n            relicscore:score,//遺器分數\r\n            relicrank:relicrank,//遺器區間\r\n            returnData:returnData//區間機率        \r\n        })\r\n        \r\n    });\r\n};\r\n\r\nfunction relicScore(partsIndex,charStandard,SubData,MainData){\r\n    let weight = 0\r\n    //var charStandard=score.find((item)=>parseInt(Object.keys(item)[0])===parseInt(charID))[charID];\r\n    var mutl=3*MainData;//直接默認強化至滿等\r\n    let caltype=[];\r\n\r\n    //如果是手跟頭則不套用主詞條加分\r\n    if(partsIndex!==1&&partsIndex!==2){\r\n        weight+=mutl;\r\n    }\r\n    SubData.forEach(a => {\r\n        //去除%數\r\n        var affix=parseFloat(a.data).toFixed(2);//實際數值\r\n        let SubAffixType=AffixName.find((s)=>s.name===a.subaffix);\r\n        \r\n        //計算有效詞條數\r\n        var affixStandard=standard.find((t)=>t.type==='sub').data.find((d)=>d.name===SubAffixType.fieldName).data;\r\n        var cal=parseFloat(affix/affixStandard).toFixed(2);\r\n        \r\n        //獲得有效詞條\r\n        let affixmutl=parseFloat(charStandard[SubAffixType.type]*cal);\r\n        //let smallAffix=caltype.find((ct)=>ct.type===SubAffixType.type);\r\n\r\n        caltype.push({\r\n            type:SubAffixType.fieldName,\r\n            affixmutl:affixmutl,\r\n        })\r\n       \r\n    });\r\n    console.log(caltype);\r\n    //計算這件遺器的最大有效詞條數\r\n    console.log(calPartWeights(charStandard,partsIndex));\r\n    //計算分數\r\n    caltype.forEach((ms)=>{\r\n        if(ms.type!=='AttackDelta'&&ms.type!=='DefenceDelta'&&ms.type!=='HPDelta')\r\n            weight+=ms.affixmutl;\r\n    });\r\n\r\n    let relicscore=0;\r\n\r\n    //接下來根據部位調整分數\r\n    //假設最大有效詞條數為10 實際只拿8個 代表你這件有80分以上的水準\r\n    //relicscore=parseFloat(55/calPartWeights(charStandard,partsIndex))*weight;\r\n    relicscore=parseFloat(weight/calPartWeights(charStandard,partsIndex))*100;\r\n    return parseFloat(relicscore).toFixed(1);\r\n    \r\n}\r\n\r\n//計算裝備權重\r\nfunction calPartWeights(charstandard,partIndex){\r\n    let partWeight = 5;//起始分數為5\r\n    let mainkey='';\r\n   \r\n    //先將標準倒序\r\n    charstandard=Object.entries(charstandard)\r\n    .sort((a, b) => b[1] - a[1]);\r\n\r\n    //主詞條 抓最大*3 剩下依序遞補 最多四個\r\n    //頭跟手會跳過\r\n    if(partIndex!==1&&partIndex!==2){\r\n\r\n        charstandard.forEach(([key,value])=>{\r\n            let unique=!weight[partIndex].sub.includes(key);\r\n            //要優先計算只出現在主詞條的\r\n            if(weight[partIndex].main.includes(key)&&mainkey===''&&unique&&value!==0){\r\n                mainkey=key;\r\n                partWeight=partWeight+value*3;\r\n            }\r\n        });\r\n\r\n        if(mainkey===''){\r\n            charstandard.forEach(([key,value])=>{\r\n                if(weight[partIndex].main.includes(key)&&mainkey===''){\r\n                    mainkey=key;\r\n                    partWeight=partWeight+value*3;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    //計算副詞條最大權重 最多計入四個\r\n    let calcount=0\r\n    charstandard.forEach(([key,value])=>{\r\n        if(key!==mainkey && calcount<4 && weight[partIndex].sub.includes(key)){\r\n            partWeight=partWeight+value;\r\n            calcount+=1;\r\n        }\r\n    });\r\n    return partWeight;\r\n}\r\n\r\n//製作標準\r\nfunction calStand(stand){\r\n\r\n    //設立一個模板 根據使用者填入參數更改\r\n    let model={\r\n        hp: 0,\r\n        atk: 0,\r\n        def: 0,\r\n        spd: 0,\r\n        crit_rate: 0,\r\n        crit_dmg: 0,\r\n        break_dmg: 0,\r\n        heal_rate: 0,\r\n        sp_rate: 0,\r\n        effect_hit: 0,\r\n        effect_res: 0,\r\n        physical_dmg: 0,\r\n        fire_dmg: 0,\r\n        ice_dmg: 0,\r\n        lightning_dmg: 0,\r\n        wind_dmg: 0,\r\n        quantum_dmg: 0,\r\n        imaginary_dmg: 0\r\n    };\r\n\r\n    //根據有效詞條關鍵字\r\n    stand.forEach((s)=>{\r\n        let target=AffixName.find((a)=>a.name===s.name).type;\r\n\r\n        model[target]=parseFloat(s.value);\r\n    });\r\n\r\n    return model;\r\n}\r\n\r\n//計算將會移置後台worker運作\r\n\r\n//所需資料\r\n//2.遺器本身數據(SubData) 3.遺器部位\r\n\r\n//回傳資料\r\n//1.遺器本身分數 2.期望值  ","export function findCombinations(sum, length) {\r\n  const result = [];\r\n\r\n  function generateCombination(arr, currentSum, index) {\r\n    if (arr.length === length) {\r\n      if (currentSum === sum) {\r\n        result.push([...arr]);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // 每個元素最少是 1，並且剩下的元素總和不能超過剩餘的 sum\r\n    for (let i = 1; i <= sum - currentSum - (length - arr.length - 1); i++) {\r\n      arr.push(i);\r\n      generateCombination(arr, currentSum + i, arr.length);\r\n      arr.pop();\r\n    }\r\n  }\r\n\r\n  generateCombination([], 0, 0);\r\n\r\n  return result;\r\n}\r\n\r\n// 測試\r\n//console.log(findCombinations(4, 9));\r\n\r\nexport  function EnchanceAllCombinations(enhanceCounts) {\r\n    const results = [];\r\n    const values = [0, 1, 2]; // 強化程度可能的值\r\n\r\n    function backtrack(index, currentCombination) {\r\n      // 如果所有詞條都已處理完成，保存結果\r\n      if (index === enhanceCounts.length) {\r\n        results.push([...currentCombination]);\r\n        return;\r\n      }\r\n\r\n      // 根據當前詞條的強化次數，生成所有可能的強化組合\r\n      const enhanceCount = enhanceCounts[index];\r\n      const possibleCombinations = [];\r\n\r\n      // 遍歷當前詞條的所有可能組合\r\n      function generateEnhanceValues(temp) {\r\n        if (temp.length === enhanceCount) {\r\n          possibleCombinations.push([...temp]);\r\n          return;\r\n        }\r\n        for (const value of values) {\r\n          temp.push(value);\r\n          generateEnhanceValues(temp);\r\n          temp.pop();\r\n        }\r\n      }\r\n\r\n      generateEnhanceValues([]);\r\n\r\n      // 對於當前詞條的每一種可能組合，繼續處理下一個詞條\r\n      for (const combination of possibleCombinations) {\r\n        currentCombination.push(combination);\r\n        backtrack(index + 1, currentCombination);\r\n        currentCombination.pop();\r\n      }\r\n    }\r\n\r\n    backtrack(0, []);\r\n    return results;\r\n}"],"names":["type","data","name","percent","main","sub","fieldName","range","calPartWeights","charstandard","partIndex","partWeight","mainkey","Object","entries","sort","a","b","forEach","_ref","key","value","unique","weight","includes","_ref2","calcount","_ref3","onmessage","event","SubData","partsIndex","parseInt","MainAffix","AffixName","find","MainData","enchanceCount","sb","Number","count","combination","sum","length","result","generateCombination","arr","currentSum","index","i","push","pop","findCombinations","charStandard","stand","model","hp","atk","def","spd","crit_rate","crit_dmg","break_dmg","heal_rate","sp_rate","effect_hit","effect_res","physical_dmg","fire_dmg","ice_dmg","lightning_dmg","wind_dmg","quantum_dmg","imaginary_dmg","s","target","parseFloat","calStand","standard","coeEfficent","SubAffixType","subaffix","num","origin","mutl","caltype","affix","toFixed","affixStandard","t","d","cal","affixmutl","console","log","ms","relicscore","relicScore","Promise","async","resolve","reject","c","subcombination","enhanceCounts","results","values","backtrack","currentCombination","enhanceCount","possibleCombinations","generateEnhanceValues","temp","EnchanceAllCombinations","res","total","el","targetRange","st","IdealyScore","then","score","relicrank","overScoreList","JSON","parse","stringify","filter","expRate","copy","returnData","rank","color","tag","match","label","undefined","this","postMessage"],"sourceRoot":""}